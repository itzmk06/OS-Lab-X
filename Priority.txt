#include <stdio.h>
#define MAX_PROCESSES 10

// Function to perform priority scheduling
void priorityScheduling(int processIds[], int priorities[], int burstTimes[], int n, int waitingTimes[], int turnaroundTimes[]) 
{
    int i, j, temp;

    // Sort processes based on priority (higher priority goes first)
    for (i = 0; i < n - 1; i++) 
    {
        for (j = 0; j < n - i - 1; j++) 
        {
            if (priorities[j] > priorities[j + 1]) 
            {
                // Swap process details
                temp = processIds[j];
                processIds[j] = processIds[j + 1];
                processIds[j + 1] = temp;

                temp = priorities[j];
                priorities[j] = priorities[j + 1];
                priorities[j + 1] = temp;

                temp = burstTimes[j];
                burstTimes[j] = burstTimes[j + 1];
                burstTimes[j + 1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time
    waitingTimes[0] = 0;
    turnaroundTimes[0] = burstTimes[0];

    for (i = 1; i < n; i++) 
    {
        waitingTimes[i] = turnaroundTimes[i - 1];
        turnaroundTimes[i] = waitingTimes[i] + burstTimes[i];
    }
}

int main()
{
    int n, i;

    // Input number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    // Declare arrays to store process details
    int processIds[MAX_PROCESSES];
    int priorities[MAX_PROCESSES];
    int burstTimes[MAX_PROCESSES];
    int waitingTimes[MAX_PROCESSES];
    int turnaroundTimes[MAX_PROCESSES];

    // Input process details
    for (i = 0; i < n; i++) 
    {
        printf("Enter details for process %d:\n", i + 1);
        processIds[i] = i + 1;
        printf("Priority: ");
        scanf("%d", &priorities[i]);
        printf("Burst Time: ");
        scanf("%d", &burstTimes[i]);
    }

    // Perform priority scheduling
    priorityScheduling(processIds, priorities, burstTimes, n, waitingTimes, turnaroundTimes);

    // Display results
    printf("\nProcess\tPriority\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) 
    {
        printf("%d\t     %d\t\t       %d\t\t      %d\t\t       %d\n", processIds[i], priorities[i],
               burstTimes[i], waitingTimes[i], turnaroundTimes[i]);
    }

    // Calculate averages
    float avgWaitingTime = 0, avgTurnaroundTime = 0;
    for (i = 0; i < n; i++) 
    {
        avgWaitingTime += waitingTimes[i];
        avgTurnaroundTime += turnaroundTimes[i];
    }
    avgWaitingTime /= n;
    avgTurnaroundTime /= n;

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);

    return 0;
}
